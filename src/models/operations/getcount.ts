/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetCountResponse = components.ErrorT | number;

/** @internal */
export const GetCountResponse$inboundSchema: z.ZodType<
  GetCountResponse,
  z.ZodTypeDef,
  unknown
> = z.union([components.ErrorT$inboundSchema, z.number().int()]);

/** @internal */
export type GetCountResponse$Outbound = components.ErrorT$Outbound | number;

/** @internal */
export const GetCountResponse$outboundSchema: z.ZodType<
  GetCountResponse$Outbound,
  z.ZodTypeDef,
  GetCountResponse
> = z.union([components.ErrorT$outboundSchema, z.number().int()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetCountResponse$ {
  /** @deprecated use `GetCountResponse$inboundSchema` instead. */
  export const inboundSchema = GetCountResponse$inboundSchema;
  /** @deprecated use `GetCountResponse$outboundSchema` instead. */
  export const outboundSchema = GetCountResponse$outboundSchema;
  /** @deprecated use `GetCountResponse$Outbound` instead. */
  export type Outbound = GetCountResponse$Outbound;
}

export function getCountResponseToJSON(
  getCountResponse: GetCountResponse,
): string {
  return JSON.stringify(
    GetCountResponse$outboundSchema.parse(getCountResponse),
  );
}

export function getCountResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetCountResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetCountResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetCountResponse' from JSON`,
  );
}
