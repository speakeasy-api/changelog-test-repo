/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ListPetsRequest = {
  /**
   * How many items to return at one time (max 100)
   */
  limit?: number | undefined;
};

export type ListPetsResponseResult = components.ErrorT | Array<components.Pet>;

export type ListPetsResponse = {
  headers: { [k: string]: Array<string> };
  result: components.ErrorT | Array<components.Pet>;
};

/** @internal */
export const ListPetsRequest$inboundSchema: z.ZodType<
  ListPetsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  limit: z.number().int().optional(),
});

/** @internal */
export type ListPetsRequest$Outbound = {
  limit?: number | undefined;
};

/** @internal */
export const ListPetsRequest$outboundSchema: z.ZodType<
  ListPetsRequest$Outbound,
  z.ZodTypeDef,
  ListPetsRequest
> = z.object({
  limit: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListPetsRequest$ {
  /** @deprecated use `ListPetsRequest$inboundSchema` instead. */
  export const inboundSchema = ListPetsRequest$inboundSchema;
  /** @deprecated use `ListPetsRequest$outboundSchema` instead. */
  export const outboundSchema = ListPetsRequest$outboundSchema;
  /** @deprecated use `ListPetsRequest$Outbound` instead. */
  export type Outbound = ListPetsRequest$Outbound;
}

export function listPetsRequestToJSON(
  listPetsRequest: ListPetsRequest,
): string {
  return JSON.stringify(ListPetsRequest$outboundSchema.parse(listPetsRequest));
}

export function listPetsRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListPetsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListPetsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListPetsRequest' from JSON`,
  );
}

/** @internal */
export const ListPetsResponseResult$inboundSchema: z.ZodType<
  ListPetsResponseResult,
  z.ZodTypeDef,
  unknown
> = z.union([
  components.ErrorT$inboundSchema,
  z.array(components.Pet$inboundSchema),
]);

/** @internal */
export type ListPetsResponseResult$Outbound =
  | components.ErrorT$Outbound
  | Array<components.Pet$Outbound>;

/** @internal */
export const ListPetsResponseResult$outboundSchema: z.ZodType<
  ListPetsResponseResult$Outbound,
  z.ZodTypeDef,
  ListPetsResponseResult
> = z.union([
  components.ErrorT$outboundSchema,
  z.array(components.Pet$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListPetsResponseResult$ {
  /** @deprecated use `ListPetsResponseResult$inboundSchema` instead. */
  export const inboundSchema = ListPetsResponseResult$inboundSchema;
  /** @deprecated use `ListPetsResponseResult$outboundSchema` instead. */
  export const outboundSchema = ListPetsResponseResult$outboundSchema;
  /** @deprecated use `ListPetsResponseResult$Outbound` instead. */
  export type Outbound = ListPetsResponseResult$Outbound;
}

export function listPetsResponseResultToJSON(
  listPetsResponseResult: ListPetsResponseResult,
): string {
  return JSON.stringify(
    ListPetsResponseResult$outboundSchema.parse(listPetsResponseResult),
  );
}

export function listPetsResponseResultFromJSON(
  jsonString: string,
): SafeParseResult<ListPetsResponseResult, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListPetsResponseResult$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListPetsResponseResult' from JSON`,
  );
}

/** @internal */
export const ListPetsResponse$inboundSchema: z.ZodType<
  ListPetsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())),
  Result: z.union([
    components.ErrorT$inboundSchema,
    z.array(components.Pet$inboundSchema),
  ]),
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
    "Result": "result",
  });
});

/** @internal */
export type ListPetsResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
  Result: components.ErrorT$Outbound | Array<components.Pet$Outbound>;
};

/** @internal */
export const ListPetsResponse$outboundSchema: z.ZodType<
  ListPetsResponse$Outbound,
  z.ZodTypeDef,
  ListPetsResponse
> = z.object({
  headers: z.record(z.array(z.string())),
  result: z.union([
    components.ErrorT$outboundSchema,
    z.array(components.Pet$outboundSchema),
  ]),
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListPetsResponse$ {
  /** @deprecated use `ListPetsResponse$inboundSchema` instead. */
  export const inboundSchema = ListPetsResponse$inboundSchema;
  /** @deprecated use `ListPetsResponse$outboundSchema` instead. */
  export const outboundSchema = ListPetsResponse$outboundSchema;
  /** @deprecated use `ListPetsResponse$Outbound` instead. */
  export type Outbound = ListPetsResponse$Outbound;
}

export function listPetsResponseToJSON(
  listPetsResponse: ListPetsResponse,
): string {
  return JSON.stringify(
    ListPetsResponse$outboundSchema.parse(listPetsResponse),
  );
}

export function listPetsResponseFromJSON(
  jsonString: string,
): SafeParseResult<ListPetsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListPetsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListPetsResponse' from JSON`,
  );
}
